#include <bits/stdc++.h>
using namespace std;

// Structure to represent an edge in the graph
struct Edge {
    int src, dest, weight;
};

// Structure to represent a disjoint set union (DSU) node
struct DSU_Node {
    int parent;
    int rank;
};

// Function to find the parent of a node in the DSU
int find(DSU_Node dsu[], int node) {
    if (dsu[node].parent == -1)
        return node;
    return dsu[node].parent = find(dsu, dsu[node].parent);
}

// Function to perform union operation in DSU
void Union(DSU_Node dsu[], int x, int y) {
    int xroot = find(dsu, x);
    int yroot = find(dsu, y);

    if (dsu[xroot].rank < dsu[yroot].rank)
        dsu[xroot].parent = yroot;
    else if (dsu[xroot].rank > dsu[yroot].rank)
        dsu[yroot].parent = xroot;
    else {
        dsu[yroot].parent = xroot;
        dsu[xroot].rank++;
    }
}

// Comparator function for sorting edges based on their weights
bool compareEdges(const Edge& e1, const Edge& e2) {
    return e1.weight < e2.weight;
}

// Kruskal's algorithm to find MST
void KruskalMST(vector<Edge>& edges, int V, int E) {
    vector<Edge> MST;
    DSU_Node dsu[V];
    
    // Initialize DSU
    for (int i = 0; i < V; i++) {
        dsu[i].parent = -1;
        dsu[i].rank = 0;
    }

    // Sort edges by weight
    sort(edges.begin(), edges.end(), compareEdges);

    int edgeCount = 0;
    for (auto edge : edges) {
        int srcParent = find(dsu, edge.src);
        int destParent = find(dsu, edge.dest);

        // If including this edge doesn't form a cycle, add it to MST
        if (srcParent != destParent) {
            MST.push_back(edge);
            Union(dsu, srcParent, destParent);
            edgeCount++;
        }

        // Stop when MST has V-1 edges
        if (edgeCount == V - 1)
            break;
    }

    // Print MST
    cout << "Edges of MST:\n";
    for (auto edge : MST) {
        cout << edge.src << " - " << edge.dest << " : " << edge.weight << endl;
    }
}

int main() {
    int V, E;
    cout << "Enter number of vertices and edges: ";
    cin >> V >> E;

    vector<Edge> edges(E);
    cout << "Enter source, destination, and weight of each edge:\n";
    for (int i = 0; i < E; i++) {
        cin >> edges[i].src >> edges[i].dest >> edges[i].weight;
    }

    KruskalMST(edges, V, E);

    return 0;
}


/*
Enter number of vertices and edges: 5 7
Enter source, destination, and weight of each edge:
0 1 2
0 3 6
1 3 8
1 2 3
1 4 5
2 4 7
3 4 9
Edges of MST:
0 - 1 : 2
1 - 2 : 3
1 - 4 : 5
0 - 3 : 6

=== Code Execution Successful ===

The provided C++ code implements Kruskal's algorithm to find the Minimum Spanning Tree (MST) of a given undirected weighted graph. Let's break down the code and its functionality:

1. **Header Files and Namespace Declaration:**
   - The code starts with `#include<bits/stdc++.h>`, which includes most standard libraries required for competitive programming.
   - `using namespace std;` declares that we are using the standard namespace.

2. **Data Structures:**
   - `struct node` is defined to represent a node in the disjoint set union-find data structure. It contains two fields: `parent` (representing the parent node) and `rank` (representing the rank of the node).
   - `struct edge` is defined to represent an edge in the graph. It contains three fields: `src` (source vertex), `dest` (destination vertex), and `wt` (weight of the edge).

3. **Utility Functions:**
   - `bool comparator(edge a, edge b)` is a comparison function used to sort edges based on their weights in non-decreasing order.
   - `int find(int v)` is a utility function to find the parent of a node using the disjoint set union-find algorithm.
   - `void union_op(int fromP, int toP)` performs the union operation by setting the parent of one disjoint set as the parent of the other disjoint set.
   - `void Kruskals(vector<edge>& edge_list, int V, int E)` is the main Kruskal's algorithm implementation. It sorts the edges based on their weights and adds them to the MST if they don't form a cycle.
   - `void printMST(vector<edge> MST)` prints the edges of the MST.

4. **Main Function:**
   - The `main()` function initializes variables `E` (number of edges) and `V` (number of vertices) and reads input for the edges.
   - It then initializes the disjoint set data structure (`dsuf`) with each node as a separate set.
   - The edges are read and stored in `edge_list`.
   - Kruskal's algorithm is called to find the MST, and the edges of the MST are printed.

5. **Sample Input and Output:**
   - The sample input consists of the number of vertices and edges followed by the source, destination, and weight of each edge.
   - The output displays the edges of the MST along with their weights.

Overall, the code efficiently computes the MST of a given graph using Kruskal's algorithm and demonstrates the core concepts of disjoint set union-find data structure and greedy algorithm design.



*/